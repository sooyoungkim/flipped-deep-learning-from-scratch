##############################################################################
# 4.3 미분
##############################################################################
##############################################################################
# 4.3.1 미분
# 4.3.2 수치 미분의 예
#   - 수치 미분으로 기울기를 구합니다.
##############################################################################
import numpy as np
import matplotlib.pylab as plt


"""변수가 하나인 함수

    parameter
    ----------------
    x : scalar 값 변수 
    
    return
    ----------------
    함수값 
"""
def function_1(x):
    return 0.01 * x ** 2 + 0.1 * x


"""접선 방정식 구하기

    parameter
    ----------------
    f : 함수 
    a : 접점의 x의 값 (scalar)
    
    return
    ----------------
    접선 방정식 
"""
def tangent_line(f, a):
    # 미분 계수 (접선의 기울기)를 구한다.
    d = numerical_diff(f, a)
    # 접점은 (a, f(a)) -> 방정식을 구해보면 y - f(a) = d(x - a) => y = dx - da + f(a)
    return lambda x: d * x - d * a + f(a)


# 수치 미분 계산 (근사치로 계산하는 미분)
def numerical_diff(f, x):
    h = 1e-4                                # 0.0001
    return (f(x + h) - f(x - h)) / (2 * h)  # h를 무한히 0으로 좁히는 것이 불가능해 생기는 오차가 있다.


plt.xlabel("x")
plt.ylabel("f(x)")

# [그림 4-6]
x = np.arange(0.0, 20.0, 0.1)   # 0에서 20까지 0.1 간격으로 배열 x를 만든다.
y = function_1(x)               # 2차 방정식
plt.plot(x, y)

# [그림 4-7]
tf1 = tangent_line(function_1, 5)   # x = 5 에서의
y2 = tf1(x)                         # 접선의 방정식
plt.plot(x, y2)

tf2 = tangent_line(function_1, 10)  # x = 10 에서의
y3 = tf2(x)                         # 접선의 방정식
plt.plot(x, y3)

plt.show()


##############################################################################
# 4.3.3 편미분
#   - 변수가 여러개인 함수에 대한 미분
#   - 여러 변수 중 목표 변수 하나에 초점을 맞추고 다른 변수는 값을 고정시킨다.
##############################################################################
def function_2(x):
    return np.sum(x ** 2)   # (x[0] ** 2 + x[1] ** 2) 과 동일하다.


def function_tmp1(x0):
    return (x0 * x0) + (4.0 ** 2.0)


def function_tmp2(x1):
    return (3.0 ** 2.0) + (x1 * x1)

print(numerical_diff(function_tmp1, 3.0))   # 6.00000000000378
print(numerical_diff(function_tmp2, 4.0))   # 7.999999999999119
